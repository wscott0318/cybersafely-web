query notifications($page: PageInput) {
  notifications(page: $page) {
    page {
      ...PageFragment
    }
    nodes {
      id
      createdAt
      body
      url
    }
  }
}

mutation readNotifications {
  readNotifications
}

query myUser($id: ID!) {
  user(id: $id) {
    id
    email
    emailConfirmed
    name
    notificationCount
    avatar {
      id
      url
    }
    roles(status: ACCEPTED) {
      ... on AnyUserRole {
        type
      }
      ... on SchoolRole {
        type
        school {
          id
          name
          logo {
            url
          }
          cover {
            url
          }
        }
      }
      ... on ParentRole {
        type
      }
    }
  }
}

mutation loginWithEmail($input: LoginWithEmailInput!) {
  loginWithEmail(input: $input) {
    token
    user {
      id
    }
  }
}

fragment PageFragment on Page {
  index
  size
  count
  total
}

query schools($page: PageInput, $order: SchoolOrder, $filter: SchoolFilter) {
  schools(page: $page, order: $order, filter: $filter) {
    page {
      ...PageFragment
    }
    nodes {
      id
      name
      phone
      createdAt
      memberCount
      logo {
        url
      }
      address {
        formatted
      }
    }
  }
}

query school($id: ID!) {
  school(id: $id) {
    id
    name
    phone
    logo {
      id
      url
    }
    cover {
      id
      url
    }
    address {
      id
      street
      state
      city
      zip
    }
  }
}

mutation createSchool($input: CreateSchoolInput!) {
  createSchool(input: $input) {
    id
  }
}

mutation updateSchool($id: ID!, $input: UpdateSchoolInput!) {
  updateSchool(id: $id, input: $input) {
    id
  }
}

query users($page: PageInput, $order: UserOrder, $filter: UserFilter) {
  users(page: $page, order: $order, filter: $filter) {
    page {
      ...PageFragment
    }
    nodes {
      id
      createdAt
      name
      email
      emailConfirmed
      avatar {
        url
      }
      roles {
        ... on AnyUserRole {
          id
          type
          status
        }
        ... on SchoolRole {
          id
          type
          status
          school {
            id
          }
        }
        ... on ParentRole {
          id
          type
          status
          childUser {
            id
          }
        }
      }
    }
  }
}

query user($id: ID!) {
  user(id: $id) {
    id
    createdAt
    name
    email
    emailConfirmed
    avatar {
      id
      url
    }
    roles {
      ... on AnyUserRole {
        id
        type
        status
      }
      ... on SchoolRole {
        id
        type
        status
        school {
          id
        }
      }
      ... on ParentRole {
        id
        type
        status
        childUser {
          id
        }
      }
    }
  }
}

mutation updateUser($id: ID!, $input: UpdateUserInput!) {
  updateUser(id: $id, input: $input) {
    id
  }
}

mutation prepareUpload {
  prepareUpload {
    id
    url
    method
    headers {
      key
      value
    }
  }
}

mutation updateImage($input: UpdateImageInput!) {
  updateImage(input: $input) {
    id
  }
}

mutation removeImage($id: ID!) {
  removeImage(id: $id)
}

mutation createAddress($schoolId: ID!, $input: CreateAddressInput!) {
  createAddress(schoolId: $schoolId, input: $input) {
    id
  }
}

mutation updateAddress($id: ID!, $input: UpdateAddressInput!) {
  updateAddress(id: $id, input: $input) {
    id
  }
}

mutation removeAddress($id: ID!) {
  removeAddress(id: $id)
}

mutation createUserRole($input: CreateUserRoleInput!) {
  createUserRole(input: $input) {
    id
  }
}

mutation removeUserRole($id: ID!) {
  removeUserRole(id: $id)
}

query settings {
  settings {
    enableSignUps
  }
}

mutation updateSettings($input: UpdateSettingsInput!) {
  updateSettings(input: $input)
}

mutation updatePassword($input: UpdatePasswordInput!) {
  updatePassword(input: $input)
}

mutation finalizeAccount($input: FinalizeAccountInput!) {
  finalizeAccount(input: $input) {
    user {
      id
    }
  }
}

mutation resetPassword($input: ResetPasswordInput!) {
  resetPassword(input: $input) {
    user {
      id
    }
  }
}

mutation forgotPassword($email: String!) {
  forgotPassword(email: $email)
}

mutation registerWithEmail($input: RegisterWithEmailInput!) {
  registerWithEmail(input: $input) {
    token
    user {
      id
    }
  }
}

mutation contact($input: ContactInput!) {
  contact(input: $input)
}

fragment StatsByDayFragment on StatsByDay {
  stats {
    day
    value
  }
  total
}

query statsForStaff($days: Int!) {
  statsOfCreatedUsers(days: $days) {
    ...StatsByDayFragment
  }
  statsOfCreatedSchools(days: $days) {
    ...StatsByDayFragment
  }
  statsOfCreatedMembers(days: $days) {
    ...StatsByDayFragment
  }
  statsOfCreatedParents(days: $days) {
    ...StatsByDayFragment
  }
}

query statsForSchool($schoolId: ID!, $days: Int!) {
  statsOfCreatedMembersInSchool(schoolId: $schoolId, days: $days) {
    ...StatsByDayFragment
  }
  statsOfInvitedMembersInSchool(schoolId: $schoolId, days: $days) {
    ...StatsByDayFragment
  }
  statsOfAcceptedMembersInSchool(schoolId: $schoolId, days: $days) {
    ...StatsByDayFragment
  }
}
