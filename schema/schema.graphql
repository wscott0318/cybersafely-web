fragment SocialFragment on Social {
  ... on Facebook {
    id
    username
  }
  ... on Twitter {
    id
    username
  }
  ... on Instagram {
    id
    username
  }
  ... on TikTok {
    id
    username
  }
}

query notifications($page: PageInput) {
  notifications(page: $page) {
    page {
      ...PageFragment
    }
    nodes {
      id
      createdAt
      body
      url
    }
  }
}

mutation readNotifications {
  readNotifications
}

query myUser($id: ID!) {
  user(id: $id) {
    id
    email
    name
    notificationCount
    avatar {
      id
      url
    }
    roles(status: ACCEPTED) {
      ... on AnyUserRole {
        id
        type
      }
      ... on SchoolRole {
        id
        type
        school {
          id
          name
          logo {
            url
          }
          cover {
            url
          }
        }
      }
      ... on ParentRole {
        id
        type
      }
    }
    platforms {
      ...SocialFragment
    }
  }
}

mutation loginWithEmail($input: LoginWithEmailInput!) {
  loginWithEmail(input: $input) {
    token
    user {
      id
      email
    }
  }
}

fragment PageFragment on Page {
  index
  size
  count
  total
}

query schools($page: PageInput, $order: SchoolOrder, $filter: SchoolFilter) {
  schools(page: $page, order: $order, filter: $filter) {
    page {
      ...PageFragment
    }
    nodes {
      id
      name
      phone
      createdAt
      memberCount
      logo {
        url
      }
      address {
        formatted
      }
    }
  }
}

query school($id: ID!) {
  school(id: $id) {
    id
    name
    phone
    logo {
      id
      url
    }
    cover {
      id
      url
    }
    address {
      id
      street
      state
      city
      zip
    }
  }
}

mutation createSchool($input: CreateSchoolInput!) {
  createSchool(input: $input) {
    id
  }
}

mutation updateSchool($id: ID!, $input: UpdateSchoolInput!) {
  updateSchool(id: $id, input: $input) {
    id
  }
}

query users($page: PageInput, $order: UserOrder, $filter: UserFilter) {
  users(page: $page, order: $order, filter: $filter) {
    page {
      ...PageFragment
    }
    nodes {
      id
      createdAt
      name
      email
      parentalApproval
      score
      platforms {
        ...SocialFragment
      }
      avatar {
        url
      }
      roles {
        ... on AnyUserRole {
          id
          type
          status
        }
        ... on SchoolRole {
          id
          type
          status
          school {
            id
            name
          }
        }
        ... on ParentRole {
          id
          type
          status
          childUser {
            id
          }
        }
      }
    }
  }
}

query user($id: ID!) {
  user(id: $id) {
    id
    createdAt
    name
    email
    avatar {
      id
      url
    }
    roles {
      ... on AnyUserRole {
        id
        type
        status
      }
      ... on SchoolRole {
        id
        type
        status
        school {
          id
        }
      }
      ... on ParentRole {
        id
        type
        status
        childUser {
          id
        }
      }
    }
    platforms {
      ...SocialFragment
    }
  }
}

mutation updateUser($id: ID!, $input: UpdateUserInput!) {
  updateUser(id: $id, input: $input) {
    id
  }
}

mutation prepareUpload {
  prepareUpload {
    id
    url
    method
    headers {
      key
      value
    }
  }
}

mutation updateImage($input: UpdateImageInput!) {
  updateImage(input: $input) {
    id
  }
}

mutation removeImage($id: ID!) {
  removeImage(id: $id)
}

mutation createAddress($schoolId: ID!, $input: CreateAddressInput!) {
  createAddress(schoolId: $schoolId, input: $input) {
    id
  }
}

mutation updateAddress($id: ID!, $input: UpdateAddressInput!) {
  updateAddress(id: $id, input: $input) {
    id
  }
}

mutation removeAddress($id: ID!) {
  removeAddress(id: $id)
}

mutation createUserRole($input: CreateUserRoleInput!) {
  createUserRole(input: $input) {
    id
  }
}

mutation removeUserRole($id: ID!) {
  removeUserRole(id: $id)
}

query settings {
  settings {
    enableSignUps
  }
}

mutation updateSettings($input: UpdateSettingsInput!) {
  updateSettings(input: $input)
}

mutation updatePassword($input: UpdatePasswordInput!) {
  updatePassword(input: $input)
}

mutation resetPassword($input: ResetPasswordInput!) {
  resetPassword(input: $input) {
    user {
      id
    }
  }
}

mutation forgotPassword($email: String!) {
  forgotPassword(email: $email)
}

mutation registerWithEmail($input: RegisterWithEmailInput!) {
  registerWithEmail(input: $input) {
    token
    user {
      id
    }
  }
}

mutation contact($input: ContactInput!) {
  contact(input: $input)
}

fragment StatsByDayFragment on StatsByDay {
  stats {
    day
    value
  }
  total
}

query statsForStaff($days: Int!) {
  statsOfCreatedUsers(days: $days) {
    ...StatsByDayFragment
  }
  statsOfCreatedSchools(days: $days) {
    ...StatsByDayFragment
  }
  statsOfCreatedMembers(days: $days) {
    ...StatsByDayFragment
  }
  statsOfCreatedParents(days: $days) {
    ...StatsByDayFragment
  }
}

query statsForSchool($schoolId: ID!, $days: Int!) {
  statsOfCreatedMembersInSchool(schoolId: $schoolId, days: $days) {
    ...StatsByDayFragment
  }
  statsOfInvitedMembersInSchool(schoolId: $schoolId, days: $days) {
    ...StatsByDayFragment
  }
  statsOfAcceptedMembersInSchool(schoolId: $schoolId, days: $days) {
    ...StatsByDayFragment
  }
  statsOfSocialsConnected(schoolId: $schoolId)
}

mutation authWithSocial($name: SocialNameEnum!) {
  authWithSocial(name: $name)
}

mutation removeSocial($name: SocialNameEnum!) {
  removeSocial(name: $name)
}

query emailSettings {
  emailSettings {
    receivePostNoneSeverity
    receivePostLowSeverity
    receivePostHighSeverity
  }
}

mutation updateEmailSettings($input: UpdateEmailSettingsInput!) {
  updateEmailSettings(input: $input)
}

query posts($schoolId: ID, $userId: ID, $parentId: ID, $page: PageInput, $filter: PostFilter) {
  posts(schoolId: $schoolId, userId: $userId, parentId: $parentId, page: $page, filter: $filter) {
    page {
      ...PageFragment
    }
    nodes {
      id
      createdAt
      url
      text
      platform
      latestAction
      severity
      manualReview
      flag {
        severity
        reasons
      }
      user {
        id
        name
        email
        avatar {
          url
        }
      }
      schools {
        id
        name
      }
      media {
        id
      }
    }
  }
}

query post($id: ID!) {
  post(id: $id) {
    id
    createdAt
    url
    text
    platform
    severity
    manualReview
    flag {
      reasons
    }
    user {
      id
      name
      email
      avatar {
        url
      }
    }
    media {
      id
      url
      type
    }
    actions {
      id
      createdAt
      name
      user {
        id
        name
        email
        avatar {
          url
        }
      }
    }
  }
}

query postCards($schoolId: ID) {
  severityNonePosts: posts(schoolId: $schoolId, filter: { severity: NONE }) {
    page {
      total
    }
  }
  severityLowPosts: posts(schoolId: $schoolId, filter: { severity: LOW }) {
    page {
      total
    }
  }
  severityHighPosts: posts(schoolId: $schoolId, filter: { severity: HIGH }) {
    page {
      total
    }
  }
}

mutation executeAction($type: ActionEnum!, $postId: ID!) {
  executeAction(type: $type, postId: $postId)
}

mutation updateUserParentalApproval($id: ID!, $approve: Boolean!, $signatureUploadId: ID) {
  updateUserParentalApproval(id: $id, approve: $approve, signatureUploadId: $signatureUploadId)
}

mutation previewImport($input: PreviewImportInput!) {
  previewImport(input: $input) {
    headers
    rows {
      values
    }
  }
}

mutation importStudentsAndParents($schoolId: ID!, $input: ImportStudentsAndParentsInput!) {
  importStudentsAndParents(schoolId: $schoolId, input: $input)
}

query invitedRole($token: String!) {
  invitedRole(token: $token) {
    type
    schoolName
    schoolLogoURL
    isNewUser
  }
}

mutation respondToInvitedRole($token: String!, $accept: Boolean!, $name: String, $password: String) {
  respondToInvitedRole(token: $token, accept: $accept, name: $name, password: $password) {
    token
    user {
      id
    }
  }
}

mutation simulateNewFlaggedPost($input: SimulateNewFlaggedPostInput!) {
  simulateNewFlaggedPost(input: $input)
}
